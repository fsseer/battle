generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  loginId         String           @unique
  nickname        String           @unique
  email           String?          @unique
  pwHash          String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  lastLoginAt     DateTime?
  loginAttempts   Int              @default(0)
  lockedUntil     DateTime?
  character       Character?
  gameSessions    GameSession[]
  nicknameChanges NicknameChange[]
  inventory       InventoryItem[]

  @@map("users")
}

model Character {
  id            String              @id @default(cuid())
  userId        String              @unique
  name          String
  level         Int                 @default(1)
  exp           Int                 @default(0)
  str           Int                 @default(5)
  agi           Int                 @default(5)
  sta           Int                 @default(5)
  int           Int                 @default(5)
  luck          Int                 @default(5)
  fate          Int                 @default(0)
  ap            Int                 @default(100)
  apMax         Int                 @default(100)
  gold          Int                 @default(0)
  stress        Int                 @default(0)
  stressMax     Int                 @default(200)
  apUpdatedAt   DateTime            @default(now())
  lastApUpdate  DateTime            @default(now())
  skills        CharacterSkill[]
  traits        CharacterTrait[]
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  proficiencies WeaponProficiency[]

  @@map("characters")
}

model WeaponProficiency {
  id          String    @id @default(cuid())
  characterId String
  kind        String
  level       Int       @default(0)
  xp          Int       @default(0)
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)

  @@unique([characterId, kind])
  @@map("weapon_proficiencies")
}

model Trait {
  id          String           @id @default(cuid())
  name        String           @unique
  description String
  category    String
  effect      Json
  characters  CharacterTrait[]

  @@map("traits")
}

model CharacterTrait {
  id          String    @id @default(cuid())
  characterId String
  traitId     String
  active      Boolean   @default(true)
  trait       Trait     @relation(fields: [traitId], references: [id], onDelete: Cascade)
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)

  @@unique([characterId, traitId])
  @@map("character_traits")
}

model Skill {
  id           String           @id @default(cuid())
  name         String           @unique
  description  String
  category     String
  requirements Json
  effect       Json
  characters   CharacterSkill[]

  @@map("skills")
}

model CharacterSkill {
  id          String    @id @default(cuid())
  characterId String
  skillId     String
  level       Int       @default(1)
  xp          Int       @default(0)
  skill       Skill     @relation(fields: [skillId], references: [id], onDelete: Cascade)
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)

  @@unique([characterId, skillId])
  @@map("character_skills")
}

model NicknameChange {
  id          String   @id @default(cuid())
  userId      String
  oldNickname String
  newNickname String
  changedAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("nickname_changes")
}

model GameSession {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("game_sessions")
}

// 기본 상점 아이템 (식당/시장 공용 카탈로그)
model Item {
  id          String   @id @default(cuid())
  shop        String   // 'restaurant' | 'market'
  name        String
  description String?
  category    String   // 'food' | 'consumable' 등
  price       Int      // 구매가
  sellPrice   Int?     // 판매가 (시장용)
  effect      Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  inventoryItems InventoryItem[]

  @@unique([shop, name])
  @@map("items")
}

// 사용자 인벤토리 (서버 보관)
model InventoryItem {
  id       String @id @default(cuid())
  userId   String
  itemId   String
  quantity Int    @default(0)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@unique([userId, itemId])
  @@map("inventory_items")
}
